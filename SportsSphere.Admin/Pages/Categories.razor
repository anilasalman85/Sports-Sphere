@page "/productcategory"
<h3>Product Categories</h3>

<!-- Importing Google Fonts -->
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Lato:wght@400;900&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">

<style>
    body {
        font-family: 'Lato', sans-serif;
        font-family: 'Poppins', sans-serif !important;
        font-family: 'Roboto', sans-serif;
        z-index: -1;
        background-color: #ffffff;
        opacity: 1;
        background-image: repeating-radial-gradient(circle at 0 0, transparent 0, #ffffff 40px), repeating-linear-gradient(#d9ffbb55, #d9ffbb);
    }

    h3 {
        color: #21D192;
    }
</style>

<div class="container">
    <!-- EditForm for capturing product category information -->
    <EditForm Model="category" OnSubmit="SaveProductCategory">
        <div class="form-group mt-3">
            <label for="categoryName">Category Name</label>
            <!-- Input field for product category name -->
            <InputText id="categoryName" @bind-Value="category.CategoryName" class="form-control" />
        </div>

        <div class="form-group mt-3">
            <label for="categoryImageReference">Category Image Reference</label>
            <!-- Input field for product category image reference -->
            <InputText id="categoryImageReference" @bind-Value="category.CategoryImageReference" class="form-control" />
        </div>

        <!-- Submit button for saving product category information -->
        <button type="submit" style="background-color:#21D192; color:white" class="btn  mt-3">Save</button>
    </EditForm>
</div>

<!-- Table for displaying product category information -->
<table class="table table-striped mt-3">
    <thead class="thead-dark">
        <tr>
            <th>Category ID</th>
            <th>Category Name</th>
            <th>Category Image</th>
            <th>Delete Category</th>
            <th>Update Category</th>
        </tr>
    </thead>
    <tbody>
        <!-- Loop through the list of product categories to display information in table rows -->
        @foreach (var item in listCategories)
        {
            <tr>
                <!-- Display product category information in table cells -->
                <td>@item.CategoryID</td>
                <td>@item.CategoryName</td>
                <td>
                    <!-- Display category image if available -->
                    @if (!string.IsNullOrEmpty(item.CategoryImageReference))
                    {
                        <img src="@item.CategoryImageReference" alt="Category Image" style="max-width: 100px; max-height: 100px;" />
                    }
                </td>
                <!-- Button to delete product category with onclick event -->
                <td><button class="btn " style="background-color:#21D192; color:white" @onclick="()=>DeleteProductCategory(item.CategoryID)">Delete</button></td>
                <!-- Button to update product category with onclick event -->
                <td><button class="btn " style="background-color:#21D192; color:white" @onclick="()=>LoadCategoryForUpdate(item.CategoryID)">Update</button></td>
            </tr>
        }
    </tbody>
</table>

@code {
    // Properties for holding current product category and list of categories
    ProductCategory category { get; set; } = new ProductCategory();
    List<ProductCategory> listCategories { get; set; } = new List<ProductCategory>();

    // Method called when the component is initialized
    protected override void OnInitialized()
    {
        // Load product category data when the component is initialized
        LoadData();
        base.OnInitialized();
    }

    // Method to save product category information
    private void SaveProductCategory()
    {
        // Save product category information using the DalProductCategories class
        DalProductCategories.SaveProductCategoryInfo(category);

        // Reload product category data after saving and clear the form
        LoadData();
        category = new ProductCategory(); // Clear the form after submission
    }

    // Method to delete product category information by ID
    private void DeleteProductCategory(int id)
    {
        // Delete product category information using the DalProductCategories class
        DalProductCategories.DeleteProductCategoryInfo(id);

        // Reload product category data after deletion
        LoadData();
    }

    // Method to load product category information for updating
    private void LoadCategoryForUpdate(int id)
    {
        // Find the product category to update from the list
        var categoryToUpdate = listCategories.FirstOrDefault(c => c.CategoryID == id);

        // If product category is found, populate the form for updating
        if (categoryToUpdate != null)
        {
            category = new ProductCategory
                {
                    CategoryID = categoryToUpdate.CategoryID,
                    CategoryName = categoryToUpdate.CategoryName,
                    CategoryImageReference = categoryToUpdate.CategoryImageReference
                };
        }
    }

    // Method to load all product category data
    private void LoadData()
    {
        // Load product category data using the DalProductCategories class
        listCategories = DalProductCategories.GetProductCategoryInfo();
    }
}
